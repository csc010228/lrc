const int space = 32
const int LF = 10
const int maxNode = 10000
int value[maxNode]
int left_child[maxNode]
int right_child[maxNode]
int now

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002ca80e0-----------------------------------------
int search ( int search::root , int search::x )  : 
	EQ		search::root , -1 --> (int)@0
	IF_JMP		@0 --> .0
-------------------------------------NEXT:0x600002ca81c0,0x600002ca8380-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca81c0-----------------------------------------
	NOP
	EQ		value[search::root] , search::x --> (int)@3
	IF_JMP		@3 --> .0
-------------------------------------NEXT:0x600002ca82a0,0x600002ca8380-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca82a0-----------------------------------------
	JMP		.1
--------------------------------------------NEXT:0x600002ca8460---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca8380-----------------------------------------
.0 : 
	RET		search::root
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca8460-----------------------------------------
.1 : 
	NOP
	GT		search::x , value[search::root] --> (int)@6
	IF_NOT_JMP		@6 --> .2
-------------------------------------NEXT:0x600002ca8540,0x600002ca8620-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca8540-----------------------------------------
	NOP
	CALL		search ( right_child[search::root] , search::x )  --> (int)@9
	RET		@9
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca8620-----------------------------------------
.2 : 
	NOP
	CALL		search ( left_child[search::root] , search::x )  --> (int)@12
	RET		@12
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca8700-----------------------------------------
.3 : 
--------------------------------------------NEXT:0x600002ca87e0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca87e0-----------------------------------------
.4 : 

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002ca89a0-----------------------------------------
int find_minimum ( int find_minimum::root )  : 
	EQ		find_minimum::root , -1 --> (int)@13
	IF_NOT_JMP		@13 --> .5
-------------------------------------NEXT:0x600002ca8a80,0x600002ca8b60-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca8a80-----------------------------------------
	RET		-1
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca8b60-----------------------------------------
.5 : 
	NOP
	UEQ		left_child[find_minimum::root] , -1 --> (int)@16
	IF_NOT_JMP		@16 --> .6
-------------------------------------NEXT:0x600002ca8c40,0x600002ca8d20-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca8c40-----------------------------------------
	NOP
	CALL		find_minimum ( left_child[find_minimum::root] )  --> (int)@19
	RET		@19
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca8d20-----------------------------------------
.6 : 
--------------------------------------------NEXT:0x600002ca8e00---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca8e00-----------------------------------------
.7 : 
	RET		find_minimum::root

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002ca8fc0-----------------------------------------
int new_node ( int new_node::x )  : 
	NOP
	ASSIGN		new_node::x --> value[now]
	NOP
	ASSIGN		-1 --> left_child[now]
	NOP
	ASSIGN		-1 --> right_child[now]
	ADD		now , 1 --> now
	SUB		now , 1 --> (int)@27
	RET		@27

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002ca9180-----------------------------------------
int insert ( int insert::root , int insert::x )  : 
	EQ		insert::root , -1 --> (int)@28
	IF_NOT_JMP		@28 --> .8
-------------------------------------NEXT:0x600002ca9260,0x600002ca9340-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca9260-----------------------------------------
	NOP
	ASSIGN		insert::x --> value[now]
	NOP
	ASSIGN		-1 --> left_child[now]
	NOP
	ASSIGN		-1 --> right_child[now]
	ADD		now , 1 --> now
	SUB		now , 1 --> (int)@116
	NOP
	RET		@116
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca9340-----------------------------------------
.8 : 
	NOP
	GT		insert::x , value[insert::root] --> (int)@32
	IF_NOT_JMP		@32 --> .9
-------------------------------------NEXT:0x600002ca9420,0x600002ca9500-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca9420-----------------------------------------
	NOP
	NOP
	CALL		insert ( right_child[insert::root] , insert::x )  --> right_child[insert::root]
	JMP		.10
--------------------------------------------NEXT:0x600002ca95e0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca9500-----------------------------------------
.9 : 
	NOP
	NOP
	CALL		insert ( left_child[insert::root] , insert::x )  --> left_child[insert::root]
--------------------------------------------NEXT:0x600002ca95e0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca95e0-----------------------------------------
.10 : 
--------------------------------------------NEXT:0x600002ca96c0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca96c0-----------------------------------------
.11 : 
	RET		insert::root

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002ca9880-----------------------------------------
int delete ( int delete::root , int delete::x )  : 
	EQ		delete::root , -1 --> (int)@43
	IF_NOT_JMP		@43 --> .12
-------------------------------------NEXT:0x600002ca9960,0x600002ca9a40-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca9960-----------------------------------------
	RET		-1
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca9a40-----------------------------------------
.12 : 
	NOP
	GT		delete::x , value[delete::root] --> (int)@46
	IF_NOT_JMP		@46 --> .13
-------------------------------------NEXT:0x600002ca9b20,0x600002ca9c00-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca9b20-----------------------------------------
	NOP
	NOP
	CALL		delete ( right_child[delete::root] , delete::x )  --> right_child[delete::root]
	JMP		.23
--------------------------------------------NEXT:0x600002caaa00---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca9c00-----------------------------------------
.13 : 
	NOP
	LT		delete::x , value[delete::root] --> (int)@54
	IF_NOT_JMP		@54 --> .14
-------------------------------------NEXT:0x600002ca9ce0,0x600002ca9dc0-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca9ce0-----------------------------------------
	NOP
	NOP
	CALL		delete ( left_child[delete::root] , delete::x )  --> left_child[delete::root]
	JMP		.22
--------------------------------------------NEXT:0x600002caa920---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca9dc0-----------------------------------------
.14 : 
	NOP
	EQ		left_child[delete::root] , -1 --> (int)@62
	IF_NOT_JMP		@62 --> .15
-------------------------------------NEXT:0x600002ca9ea0,0x600002caa060-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca9ea0-----------------------------------------
	NOP
	EQ		right_child[delete::root] , -1 --> (int)@65
	IF_NOT_JMP		@65 --> .15
-------------------------------------NEXT:0x600002ca9f80,0x600002caa060-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002ca9f80-----------------------------------------
	RET		-1
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002caa060-----------------------------------------
.15 : 
	NOP
	EQ		left_child[delete::root] , -1 --> (int)@68
	IF_JMP		@68 --> .16
-------------------------------------NEXT:0x600002caa140,0x600002caa300-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002caa140-----------------------------------------
	NOP
	EQ		right_child[delete::root] , -1 --> (int)@71
	IF_JMP		@71 --> .16
-------------------------------------NEXT:0x600002caa220,0x600002caa300-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002caa220-----------------------------------------
	JMP		.19
--------------------------------------------NEXT:0x600002caa680---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002caa300-----------------------------------------
.16 : 
	NOP
	EQ		left_child[delete::root] , -1 --> (int)@74
	IF_NOT_JMP		@74 --> .17
-------------------------------------NEXT:0x600002caa3e0,0x600002caa4c0-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002caa3e0-----------------------------------------
	NOP
	RET		right_child[delete::root]
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002caa4c0-----------------------------------------
.17 : 
	NOP
	RET		left_child[delete::root]
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002caa5a0-----------------------------------------
.18 : 
	JMP		.20
--------------------------------------------NEXT:0x600002caa760---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002caa680-----------------------------------------
.19 : 
	int delete::else_0::tmp
	NOP
	CALL		find_minimum ( right_child[delete::root] )  --> (int)@81
	NOP
	NOP
	NOP
	ASSIGN		value[@81] --> value[delete::root]
	NOP
	NOP
	NOP
	CALL		delete ( right_child[delete::root] , value[@81] )  --> right_child[delete::root]
--------------------------------------------NEXT:0x600002caa760---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002caa760-----------------------------------------
.20 : 
--------------------------------------------NEXT:0x600002caa840---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002caa840-----------------------------------------
.21 : 
--------------------------------------------NEXT:0x600002caa920---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002caa920-----------------------------------------
.22 : 
--------------------------------------------NEXT:0x600002caaa00---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002caaa00-----------------------------------------
.23 : 
	RET		delete::root

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002caabc0-----------------------------------------
void inorder ( int inorder::root )  : 
	UEQ		inorder::root , -1 --> (int)@93
	IF_NOT_JMP		@93 --> .24
-------------------------------------NEXT:0x600002caaca0,0x600002caad80-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002caaca0-----------------------------------------
	NOP
	CALL		inorder ( left_child[inorder::root] ) 
	NOP
	CALL		putint ( value[inorder::root] ) 
	CALL		putch ( space ) 
	NOP
	CALL		inorder ( right_child[inorder::root] ) 
--------------------------------------------NEXT:0x600002caad80---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002caad80-----------------------------------------
.24 : 
	RET

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002caaf40-----------------------------------------
int main (  )  : 
	int main::n
	ASSIGN		0 --> now
	CALL		getint (  )  --> (int)@100
	ASSIGN		@100 --> main::n
	NOT		@100 --> (int)@101
	IF_NOT_JMP		@101 --> .25
-------------------------------------NEXT:0x600002cab020,0x600002cab100-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002cab020-----------------------------------------
	RET		0
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002cab100-----------------------------------------
.25 : 
	int main::root
	int main::i
	CALL		getint (  )  --> (int)@102
	NOP
	ASSIGN		@102 --> value[now]
	NOP
	ASSIGN		-1 --> left_child[now]
	NOP
	ASSIGN		-1 --> right_child[now]
	ASSIGN		1 --> now
	SUB		now , 1 --> (int)@120
	NOP
	ASSIGN		@120 --> main::root
	ASSIGN		1 --> main::i
--------------------------------------------NEXT:0x600002cab1e0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002cab1e0-----------------------------------------
.26 : 
	LT		main::i , main::n --> (int)@104
	IF_NOT_JMP		@104 --> .27
-------------------------------------NEXT:0x600002cab2c0,0x600002cab3a0-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002cab2c0-----------------------------------------
	CALL		getint (  )  --> (int)@105
	CALL		insert ( main::root , @105 )  --> (int)@106
	ADD		main::i , 1 --> main::i
	JMP		.26
--------------------------------------------NEXT:0x600002cab1e0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002cab3a0-----------------------------------------
.27 : 
	CALL		inorder ( main::root ) 
	CALL		putch ( LF ) 
	CALL		getint (  )  --> main::n
	ASSIGN		0 --> main::i
--------------------------------------------NEXT:0x600002cab480---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002cab480-----------------------------------------
.28 : 
	LT		main::i , main::n --> (int)@109
	IF_NOT_JMP		@109 --> .29
-------------------------------------NEXT:0x600002cab560,0x600002cab640-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002cab560-----------------------------------------
	CALL		getint (  )  --> (int)@110
	CALL		delete ( main::root , @110 )  --> main::root
	ADD		main::i , 1 --> main::i
	JMP		.28
--------------------------------------------NEXT:0x600002cab480---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002cab640-----------------------------------------
.29 : 
	CALL		inorder ( main::root ) 
	CALL		putch ( LF ) 
	RET		0

------------------------------------------------------------------------------------------------------------
============================================================================================================
