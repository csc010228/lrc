const int base = 16
int a[30000010]
int ans
=========================================BASIC_BLOCK:0x60000337a640=========================================
int getMaxNum ( int getMaxNum::n , int getMaxNum::arr[0] )  : 
	int getMaxNum::ret
	ASSIGN		0 --> getMaxNum::ret
	int getMaxNum::i
	ASSIGN		0 --> getMaxNum::i
============================================================================================================
=========================================BASIC_BLOCK:0x60000337a6a0=========================================
.0 : 
	LT		getMaxNum::i , getMaxNum::n --> (int)@0
	IF_NOT_JMP		@0 --> .2
=========================================MAY_JUMP_TO:0x60000337a7c0=========================================
=========================================BASIC_BLOCK:0x60000337a700=========================================
	MUL		getMaxNum::i , 1 --> (int)@1
	ADD		@1 , 0 --> (int)@2
	GT		getMaxNum::arr[@2] , getMaxNum::ret --> (int)@3
	IF_NOT_JMP		@3 --> .1
=========================================MAY_JUMP_TO:0x60000337a760=========================================
=========================================BASIC_BLOCK:0x60000337a730=========================================
	MUL		getMaxNum::i , 1 --> (int)@4
	ADD		@4 , 0 --> (int)@5
	ASSIGN		getMaxNum::arr[@5] --> getMaxNum::ret
============================================================================================================
=========================================BASIC_BLOCK:0x60000337a760=========================================
.1 : 
	ADD		getMaxNum::i , 1 --> (int)@6
	ASSIGN		@6 --> getMaxNum::i
	JMP		.0
=========================================MAY_JUMP_TO:0x60000337a6a0=========================================
=========================================BASIC_BLOCK:0x60000337a7c0=========================================
.2 : 
	RET		getMaxNum::ret

============================================================================================================
=========================================BASIC_BLOCK:0x60000337a820=========================================
int getNumPos ( int getNumPos::num , int getNumPos::pos )  : 
	int getNumPos::tmp
	ASSIGN		1 --> getNumPos::tmp
	int getNumPos::i
	ASSIGN		0 --> getNumPos::i
============================================================================================================
=========================================BASIC_BLOCK:0x60000337a850=========================================
.3 : 
	LT		getNumPos::i , getNumPos::pos --> (int)@7
	IF_NOT_JMP		@7 --> .4
=========================================MAY_JUMP_TO:0x60000337a8e0=========================================
=========================================BASIC_BLOCK:0x60000337a8b0=========================================
	DIV		getNumPos::num , base --> (int)@8
	ASSIGN		@8 --> getNumPos::num
	ADD		getNumPos::i , 1 --> (int)@9
	ASSIGN		@9 --> getNumPos::i
	JMP		.3
=========================================MAY_JUMP_TO:0x60000337a850=========================================
=========================================BASIC_BLOCK:0x60000337a8e0=========================================
.4 : 
	MOD		getNumPos::num , base --> (int)@10
	RET		@10

============================================================================================================
=========================================BASIC_BLOCK:0x60000337a940=========================================
void radixSort ( int radixSort::bitround , int radixSort::a[0] , int radixSort::l , int radixSort::r )  : 
	int radixSort::head[base] = { 0 , ...... } 
	int radixSort::tail[base] = { 0 , ...... } 
	int radixSort::cnt[base] = { 0 , ...... } 
	EQ		radixSort::bitround , -1 --> (int)@11
	IF_JMP		@11 --> .5
=========================================MAY_JUMP_TO:0x60000337a9d0=========================================
=========================================BASIC_BLOCK:0x60000337a970=========================================
	ADD		radixSort::l , 1 --> (int)@12
	GE		@12 , radixSort::r --> (int)@13
	IF_JMP		@13 --> .5
=========================================MAY_JUMP_TO:0x60000337a9d0=========================================
=========================================BASIC_BLOCK:0x60000337a9a0=========================================
	JMP		.6
=========================================MAY_JUMP_TO:0x60000337aa30=========================================
=========================================BASIC_BLOCK:0x60000337a9d0=========================================
.5 : 
	RET
============================================================================================================
=========================================BASIC_BLOCK:0x60000337aa30=========================================
.6 : 
	int radixSort::_0::i
	ASSIGN		radixSort::l --> radixSort::_0::i
============================================================================================================
=========================================BASIC_BLOCK:0x60000337aa90=========================================
.7 : 
	LT		radixSort::_0::i , radixSort::r --> (int)@14
	IF_NOT_JMP		@14 --> .8
=========================================MAY_JUMP_TO:0x60000337ab20=========================================
=========================================BASIC_BLOCK:0x60000337aaf0=========================================
	MUL		radixSort::_0::i , 1 --> (int)@15
	ADD		@15 , 0 --> (int)@16
	CALL		getNumPos ( radixSort::a[@16] , radixSort::bitround )  --> (int)@17
	MUL		@17 , 1 --> (int)@18
	ADD		@18 , 0 --> (int)@19
	MUL		radixSort::_0::i , 1 --> (int)@20
	ADD		@20 , 0 --> (int)@21
	CALL		getNumPos ( radixSort::a[@21] , radixSort::bitround )  --> (int)@22
	MUL		@22 , 1 --> (int)@23
	ADD		@23 , 0 --> (int)@24
	ADD		radixSort::cnt[@24] , 1 --> (int)@25
	ASSIGN		@25 --> radixSort::cnt[@19]
	ADD		radixSort::_0::i , 1 --> (int)@26
	ASSIGN		@26 --> radixSort::_0::i
	JMP		.7
=========================================MAY_JUMP_TO:0x60000337aa90=========================================
=========================================BASIC_BLOCK:0x60000337ab20=========================================
.8 : 
	ASSIGN		radixSort::l --> radixSort::head[0]
	ADD		radixSort::l , radixSort::cnt[0] --> (int)@27
	ASSIGN		@27 --> radixSort::tail[0]
	ASSIGN		1 --> radixSort::_0::i
============================================================================================================
=========================================BASIC_BLOCK:0x60000337ab80=========================================
.9 : 
	LT		radixSort::_0::i , base --> (int)@28
	IF_NOT_JMP		@28 --> .10
=========================================MAY_JUMP_TO:0x60000337ac10=========================================
=========================================BASIC_BLOCK:0x60000337abe0=========================================
	MUL		radixSort::_0::i , 1 --> (int)@29
	ADD		@29 , 0 --> (int)@30
	SUB		radixSort::_0::i , 1 --> (int)@31
	MUL		@31 , 1 --> (int)@32
	ADD		@32 , 0 --> (int)@33
	ASSIGN		radixSort::tail[@33] --> radixSort::head[@30]
	MUL		radixSort::_0::i , 1 --> (int)@34
	ADD		@34 , 0 --> (int)@35
	MUL		radixSort::_0::i , 1 --> (int)@36
	ADD		@36 , 0 --> (int)@37
	MUL		radixSort::_0::i , 1 --> (int)@38
	ADD		@38 , 0 --> (int)@39
	ADD		radixSort::head[@37] , radixSort::cnt[@39] --> (int)@40
	ASSIGN		@40 --> radixSort::tail[@35]
	ADD		radixSort::_0::i , 1 --> (int)@41
	ASSIGN		@41 --> radixSort::_0::i
	JMP		.9
=========================================MAY_JUMP_TO:0x60000337ab80=========================================
=========================================BASIC_BLOCK:0x60000337ac10=========================================
.10 : 
	ASSIGN		0 --> radixSort::_0::i
============================================================================================================
=========================================BASIC_BLOCK:0x60000337ac70=========================================
.11 : 
	LT		radixSort::_0::i , base --> (int)@42
	IF_NOT_JMP		@42 --> .16
=========================================MAY_JUMP_TO:0x60000337aeb0=========================================
=========================================BASIC_BLOCK:0x60000337acd0=========================================
.12 : 
	MUL		radixSort::_0::i , 1 --> (int)@43
	ADD		@43 , 0 --> (int)@44
	MUL		radixSort::_0::i , 1 --> (int)@45
	ADD		@45 , 0 --> (int)@46
	LT		radixSort::head[@44] , radixSort::tail[@46] --> (int)@47
	IF_NOT_JMP		@47 --> .15
=========================================MAY_JUMP_TO:0x60000337ae50=========================================
=========================================BASIC_BLOCK:0x60000337ad30=========================================
	MUL		radixSort::_0::i , 1 --> (int)@48
	ADD		@48 , 0 --> (int)@49
	MUL		radixSort::head[@49] , 1 --> (int)@50
	ADD		@50 , 0 --> (int)@51
	int radixSort::_0::while_2::while_0::v
	ASSIGN		radixSort::a[@51] --> radixSort::_0::while_2::while_0::v
============================================================================================================
=========================================BASIC_BLOCK:0x60000337ad60=========================================
.13 : 
	CALL		getNumPos ( radixSort::_0::while_2::while_0::v , radixSort::bitround )  --> (int)@52
	UEQ		@52 , radixSort::_0::i --> (int)@53
	IF_NOT_JMP		@53 --> .14
=========================================MAY_JUMP_TO:0x60000337adf0=========================================
=========================================BASIC_BLOCK:0x60000337adc0=========================================
	int radixSort::_0::while_2::while_0::while_0::t
	ASSIGN		radixSort::_0::while_2::while_0::v --> radixSort::_0::while_2::while_0::while_0::t
	CALL		getNumPos ( radixSort::_0::while_2::while_0::while_0::t , radixSort::bitround )  --> (int)@54
	MUL		@54 , 1 --> (int)@55
	ADD		@55 , 0 --> (int)@56
	MUL		radixSort::head[@56] , 1 --> (int)@57
	ADD		@57 , 0 --> (int)@58
	ASSIGN		radixSort::a[@58] --> radixSort::_0::while_2::while_0::v
	CALL		getNumPos ( radixSort::_0::while_2::while_0::while_0::t , radixSort::bitround )  --> (int)@59
	MUL		@59 , 1 --> (int)@60
	ADD		@60 , 0 --> (int)@61
	MUL		radixSort::head[@61] , 1 --> (int)@62
	ADD		@62 , 0 --> (int)@63
	ASSIGN		radixSort::_0::while_2::while_0::while_0::t --> radixSort::a[@63]
	CALL		getNumPos ( radixSort::_0::while_2::while_0::while_0::t , radixSort::bitround )  --> (int)@64
	MUL		@64 , 1 --> (int)@65
	ADD		@65 , 0 --> (int)@66
	CALL		getNumPos ( radixSort::_0::while_2::while_0::while_0::t , radixSort::bitround )  --> (int)@67
	MUL		@67 , 1 --> (int)@68
	ADD		@68 , 0 --> (int)@69
	ADD		radixSort::head[@69] , 1 --> (int)@70
	ASSIGN		@70 --> radixSort::head[@66]
	JMP		.13
=========================================MAY_JUMP_TO:0x60000337ad60=========================================
=========================================BASIC_BLOCK:0x60000337adf0=========================================
.14 : 
	MUL		radixSort::_0::i , 1 --> (int)@71
	ADD		@71 , 0 --> (int)@72
	MUL		radixSort::head[@72] , 1 --> (int)@73
	ADD		@73 , 0 --> (int)@74
	ASSIGN		radixSort::_0::while_2::while_0::v --> radixSort::a[@74]
	MUL		radixSort::_0::i , 1 --> (int)@75
	ADD		@75 , 0 --> (int)@76
	MUL		radixSort::_0::i , 1 --> (int)@77
	ADD		@77 , 0 --> (int)@78
	ADD		radixSort::head[@78] , 1 --> (int)@79
	ASSIGN		@79 --> radixSort::head[@76]
	JMP		.12
=========================================MAY_JUMP_TO:0x60000337acd0=========================================
=========================================BASIC_BLOCK:0x60000337ae50=========================================
.15 : 
	ADD		radixSort::_0::i , 1 --> (int)@80
	ASSIGN		@80 --> radixSort::_0::i
	JMP		.11
=========================================MAY_JUMP_TO:0x60000337ac70=========================================
=========================================BASIC_BLOCK:0x60000337aeb0=========================================
.16 : 
	int radixSort::_1::i
	ASSIGN		radixSort::l --> radixSort::_1::i
	ASSIGN		radixSort::l --> radixSort::head[0]
	ADD		radixSort::l , radixSort::cnt[0] --> (int)@81
	ASSIGN		@81 --> radixSort::tail[0]
	ASSIGN		0 --> radixSort::_1::i
============================================================================================================
=========================================BASIC_BLOCK:0x60000337af10=========================================
.17 : 
	LT		radixSort::_1::i , base --> (int)@82
	IF_NOT_JMP		@82 --> .19
=========================================MAY_JUMP_TO:0x60000337b030=========================================
=========================================BASIC_BLOCK:0x60000337af70=========================================
	GT		radixSort::_1::i , 0 --> (int)@83
	IF_NOT_JMP		@83 --> .18
=========================================MAY_JUMP_TO:0x60000337afd0=========================================
=========================================BASIC_BLOCK:0x60000337afa0=========================================
	MUL		radixSort::_1::i , 1 --> (int)@84
	ADD		@84 , 0 --> (int)@85
	SUB		radixSort::_1::i , 1 --> (int)@86
	MUL		@86 , 1 --> (int)@87
	ADD		@87 , 0 --> (int)@88
	ASSIGN		radixSort::tail[@88] --> radixSort::head[@85]
	MUL		radixSort::_1::i , 1 --> (int)@89
	ADD		@89 , 0 --> (int)@90
	MUL		radixSort::_1::i , 1 --> (int)@91
	ADD		@91 , 0 --> (int)@92
	MUL		radixSort::_1::i , 1 --> (int)@93
	ADD		@93 , 0 --> (int)@94
	ADD		radixSort::head[@92] , radixSort::cnt[@94] --> (int)@95
	ASSIGN		@95 --> radixSort::tail[@90]
============================================================================================================
=========================================BASIC_BLOCK:0x60000337afd0=========================================
.18 : 
	SUB		radixSort::bitround , 1 --> (int)@96
	MUL		radixSort::_1::i , 1 --> (int)@97
	ADD		@97 , 0 --> (int)@98
	MUL		radixSort::_1::i , 1 --> (int)@99
	ADD		@99 , 0 --> (int)@100
	CALL		radixSort ( @96 , radixSort::a , radixSort::head[@98] , radixSort::tail[@100] ) 
	ADD		radixSort::_1::i , 1 --> (int)@101
	ASSIGN		@101 --> radixSort::_1::i
	JMP		.17
=========================================MAY_JUMP_TO:0x60000337af10=========================================
=========================================BASIC_BLOCK:0x60000337b030=========================================
.19 : 
	RET
	RET

============================================================================================================
=========================================BASIC_BLOCK:0x60000337b090=========================================
int main (  )  : 
	CALL		getarray ( a )  --> (int)@102
	int main::n
	ASSIGN		@102 --> main::n
	CALL		_sysy_starttime ( 90 ) 
	CALL		radixSort ( 8 , a , 0 , main::n ) 
	int main::i
	ASSIGN		0 --> main::i
============================================================================================================
=========================================BASIC_BLOCK:0x60000337b0c0=========================================
.20 : 
	LT		main::i , main::n --> (int)@103
	IF_NOT_JMP		@103 --> .21
=========================================MAY_JUMP_TO:0x60000337b150=========================================
=========================================BASIC_BLOCK:0x60000337b120=========================================
	MUL		main::i , 1 --> (int)@104
	ADD		@104 , 0 --> (int)@105
	ADD		2 , main::i --> (int)@106
	MOD		a[@105] , @106 --> (int)@107
	MUL		main::i , @107 --> (int)@108
	ADD		ans , @108 --> (int)@109
	ASSIGN		@109 --> ans
	ADD		main::i , 1 --> (int)@110
	ASSIGN		@110 --> main::i
	JMP		.20
=========================================MAY_JUMP_TO:0x60000337b0c0=========================================
=========================================BASIC_BLOCK:0x60000337b150=========================================
.21 : 
	LT		ans , 0 --> (int)@111
	IF_NOT_JMP		@111 --> .22
=========================================MAY_JUMP_TO:0x60000337b1e0=========================================
=========================================BASIC_BLOCK:0x60000337b1b0=========================================
	SUB		0 , ans --> (int)@112
	ASSIGN		@112 --> ans
============================================================================================================
=========================================BASIC_BLOCK:0x60000337b1e0=========================================
.22 : 
	CALL		_sysy_stoptime ( 102 ) 
	CALL		putint ( ans ) 
	CALL		putch ( 10 ) 
	RET		0

============================================================================================================
