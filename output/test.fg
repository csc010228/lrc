const int mod = 998244353
int d
const int maxlen = 2097152
int temp[maxlen]
int a[maxlen]
int b[maxlen]
int c[maxlen]

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002fbc1c0-----------------------------------------
int multiply ( int multiply::a , int multiply::b )  : 
	EQ		multiply::b , 0 --> (int)@0
	IF_NOT_JMP		@0 --> .0
-------------------------------------NEXT:0x600002fbc2a0,0x600002fbc380-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbc2a0-----------------------------------------
	RET		0
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbc380-----------------------------------------
.0 : 
	EQ		multiply::b , 1 --> (int)@1
	IF_NOT_JMP		@1 --> .1
-------------------------------------NEXT:0x600002fbc460,0x600002fbc540-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbc460-----------------------------------------
	MOD		multiply::a , mod --> (int)@2
	RET		@2
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbc540-----------------------------------------
.1 : 
	int multiply::cur
	DIV		multiply::b , 2 --> (int)@3
	CALL		multiply ( multiply::a , @3 )  --> (int)@4
	NOP
	MUL		@4 , 2 --> (int)@5
	MOD		@5 , mod --> multiply::cur
	MOD		multiply::b , 2 --> (int)@7
	EQ		@7 , 1 --> (int)@8
	IF_NOT_JMP		@8 --> .2
-------------------------------------NEXT:0x600002fbc620,0x600002fbc700-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbc620-----------------------------------------
	ADD		multiply::cur , multiply::a --> (int)@9
	MOD		@9 , mod --> (int)@10
	RET		@10
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbc700-----------------------------------------
.2 : 
	RET		multiply::cur
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbc7e0-----------------------------------------
.3 : 

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002fbc9a0-----------------------------------------
int power ( int power::a , int power::b )  : 
	EQ		power::b , 0 --> (int)@11
	IF_NOT_JMP		@11 --> .4
-------------------------------------NEXT:0x600002fbca80,0x600002fbcb60-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbca80-----------------------------------------
	RET		1
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbcb60-----------------------------------------
.4 : 
	int power::cur
	DIV		power::b , 2 --> (int)@12
	CALL		power ( power::a , @12 )  --> (int)@13
	NOP
	CALL		multiply ( @13 , @13 )  --> power::cur
	MOD		power::b , 2 --> (int)@15
	EQ		@15 , 1 --> (int)@16
	IF_NOT_JMP		@16 --> .5
-------------------------------------NEXT:0x600002fbcc40,0x600002fbcd20-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbcc40-----------------------------------------
	CALL		multiply ( power::cur , power::a )  --> (int)@17
	RET		@17
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbcd20-----------------------------------------
.5 : 
	RET		power::cur
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbce00-----------------------------------------
.6 : 

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002fbcfc0-----------------------------------------
int memmove ( int memmove::dst[0] , int memmove::dst_pos , int memmove::src[0] , int memmove::len )  : 
	int memmove::i
	ASSIGN		0 --> memmove::i
--------------------------------------------NEXT:0x600002fbd0a0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbd0a0-----------------------------------------
.7 : 
	LT		memmove::i , memmove::len --> (int)@18
	IF_NOT_JMP		@18 --> .8
-------------------------------------NEXT:0x600002fbd180,0x600002fbd260-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbd180-----------------------------------------
	ADD		memmove::dst_pos , memmove::i --> (int)@21
	NOP
	ASSIGN		memmove::src[memmove::i] --> memmove::dst[@21]
	ADD		memmove::i , 1 --> memmove::i
	JMP		.7
--------------------------------------------NEXT:0x600002fbd0a0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbd260-----------------------------------------
.8 : 
	RET		memmove::i

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002fbd420-----------------------------------------
int fft ( int fft::arr[0] , int fft::begin_pos , int fft::n , int fft::w )  : 
	EQ		fft::n , 1 --> (int)@25
	IF_NOT_JMP		@25 --> .9
-------------------------------------NEXT:0x600002fbd500,0x600002fbd5e0-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbd500-----------------------------------------
	RET		1
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbd5e0-----------------------------------------
.9 : 
	int fft::i
	ASSIGN		0 --> fft::i
	DIV		fft::n , 2 --> (int)@35
--------------------------------------------NEXT:0x600002fbd6c0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbd6c0-----------------------------------------
.10 : 
	LT		fft::i , fft::n --> (int)@26
	IF_NOT_JMP		@26 --> .13
-------------------------------------NEXT:0x600002fbd7a0,0x600002fbdb20-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbd7a0-----------------------------------------
	MOD		fft::i , 2 --> (int)@27
	EQ		@27 , 0 --> (int)@28
	IF_NOT_JMP		@28 --> .11
-------------------------------------NEXT:0x600002fbd880,0x600002fbd960-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbd880-----------------------------------------
	DIV		fft::i , 2 --> (int)@31
	ADD		fft::i , fft::begin_pos --> (int)@34
	ASSIGN		fft::arr[@34] --> temp[@31]
	JMP		.12
--------------------------------------------NEXT:0x600002fbda40---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbd960-----------------------------------------
.11 : 
	NOP
	DIV		fft::i , 2 --> (int)@36
	ADD		@35 , @36 --> (int)@39
	ADD		fft::i , fft::begin_pos --> (int)@42
	ASSIGN		fft::arr[@42] --> temp[@39]
--------------------------------------------NEXT:0x600002fbda40---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbda40-----------------------------------------
.12 : 
	ADD		fft::i , 1 --> fft::i
	JMP		.10
--------------------------------------------NEXT:0x600002fbd6c0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbdb20-----------------------------------------
.13 : 
	int fft::wn
	CALL		memmove ( fft::arr , fft::begin_pos , temp , fft::n )  --> (int)@44
	DIV		fft::n , 2 --> (int)@45
	CALL		multiply ( fft::w , fft::w )  --> (int)@46
	CALL		fft ( fft::arr , fft::begin_pos , @45 , @46 )  --> (int)@47
	NOP
	ADD		fft::begin_pos , @45 --> (int)@49
	ASSIGN		@45 --> (int)@50
	NOP
	CALL		fft ( fft::arr , @49 , @45 , @46 )  --> (int)@52
	ASSIGN		0 --> fft::i
	ASSIGN		1 --> fft::wn
	ASSIGN		@50 --> (int)@53
--------------------------------------------NEXT:0x600002fbdc00---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbdc00-----------------------------------------
.14 : 
	NOP
	LT		fft::i , @53 --> (int)@54
	IF_NOT_JMP		@54 --> .15
-------------------------------------NEXT:0x600002fbdce0,0x600002fbddc0-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbdce0-----------------------------------------
	int fft::while_1::x
	int fft::while_1::y
	ADD		fft::begin_pos , fft::i --> (int)@57
	ASSIGN		fft::arr[@57] --> fft::while_1::x
	NOP
	ASSIGN		@53 --> (int)@59
	ADD		@57 , @59 --> (int)@62
	ASSIGN		fft::arr[@62] --> fft::while_1::y
	NOP
	CALL		multiply ( fft::wn , fft::arr[@62] )  --> (int)@66
	ADD		fft::arr[@57] , @66 --> (int)@67
	MOD		@67 , mod --> fft::arr[@57]
	NOP
	NOP
	NOP
	CALL		multiply ( fft::wn , fft::while_1::y )  --> (int)@74
	SUB		fft::while_1::x , @74 --> (int)@75
	ADD		@75 , mod --> (int)@76
	MOD		@76 , mod --> fft::arr[@62]
	CALL		multiply ( fft::wn , fft::w )  --> fft::wn
	ADD		fft::i , 1 --> fft::i
	JMP		.14
--------------------------------------------NEXT:0x600002fbdc00---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbddc0-----------------------------------------
.15 : 
	RET		0

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002fbdf80-----------------------------------------
int main (  )  : 
	int main::n
	int main::m
	CALL		getarray ( a )  --> (int)@80
	ASSIGN		@80 --> main::n
	CALL		getarray ( b )  --> (int)@81
	ASSIGN		@81 --> main::m
	CALL		_sysy_starttime ( 60 ) 
	ASSIGN		1 --> d
	ADD		main::n , main::m --> (int)@82
--------------------------------------------NEXT:0x600002fbe060---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbe060-----------------------------------------
.16 : 
	NOP
	SUB		@82 , 1 --> (int)@83
	LT		d , @83 --> (int)@84
	IF_NOT_JMP		@84 --> .17
-------------------------------------NEXT:0x600002fbe140,0x600002fbe220-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbe140-----------------------------------------
	MUL		d , 2 --> d
	JMP		.16
--------------------------------------------NEXT:0x600002fbe060---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbe220-----------------------------------------
.17 : 
	int main::i
	DIV		998244352 , d --> (int)@86
	CALL		power ( 3 , @86 )  --> (int)@87
	CALL		fft ( a , 0 , d , @87 )  --> (int)@88
	NOP
	NOP
	CALL		fft ( b , 0 , d , @87 )  --> (int)@91
	ASSIGN		0 --> main::i
--------------------------------------------NEXT:0x600002fbe300---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbe300-----------------------------------------
.18 : 
	LT		main::i , d --> (int)@92
	IF_NOT_JMP		@92 --> .19
-------------------------------------NEXT:0x600002fbe3e0,0x600002fbe4c0-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbe3e0-----------------------------------------
	NOP
	NOP
	NOP
	CALL		multiply ( a[main::i] , b[main::i] )  --> a[main::i]
	ADD		main::i , 1 --> main::i
	JMP		.18
--------------------------------------------NEXT:0x600002fbe300---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbe4c0-----------------------------------------
.19 : 
	ASSIGN		@86 --> (int)@101
	SUB		998244352 , @101 --> (int)@102
	CALL		power ( 3 , @102 )  --> (int)@103
	CALL		fft ( a , 0 , d , @103 )  --> (int)@104
	ASSIGN		0 --> main::i
--------------------------------------------NEXT:0x600002fbe5a0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbe5a0-----------------------------------------
.20 : 
	LT		main::i , d --> (int)@105
	IF_NOT_JMP		@105 --> .21
-------------------------------------NEXT:0x600002fbe680,0x600002fbe760-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbe680-----------------------------------------
	NOP
	NOP
	CALL		power ( d , 998244351 )  --> (int)@110
	CALL		multiply ( a[main::i] , @110 )  --> a[main::i]
	ADD		main::i , 1 --> main::i
	JMP		.20
--------------------------------------------NEXT:0x600002fbe5a0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002fbe760-----------------------------------------
.21 : 
	CALL		_sysy_stoptime ( 79 ) 
	NOP
	ASSIGN		@83 --> (int)@114
	CALL		putarray ( @114 , a ) 
	RET		0

------------------------------------------------------------------------------------------------------------
============================================================================================================
