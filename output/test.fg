const int MAX_DIM_X = 8
const int MAX_DIM_Y = 8
float test_block[MAX_DIM_X][MAX_DIM_Y]
float test_dct[MAX_DIM_X][MAX_DIM_Y]
float test_idct[MAX_DIM_X][MAX_DIM_Y]
const float PI = 3.141593
const float TWO_PI = 6.283185
const float EPSILON = 0.000001

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x6000025240e0-----------------------------------------
float my_fabs ( float my_fabs::x )  : 
	GT		my_fabs::x , 0.000000 --> (float)@0
	IF_NOT_JMP		@0 --> .0
-------------------------------------NEXT:0x6000025241c0,0x6000025242a0-------------------------------------
-----------------------------------------BASIC_BLOCK:0x6000025241c0-----------------------------------------
	RET		my_fabs::x
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x6000025242a0-----------------------------------------
.0 : 
	SUB		0.000000 , my_fabs::x --> (float)@1
	RET		@1

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002524460-----------------------------------------
float p ( float p::x )  : 
	MUL		3.000000 , p::x --> (float)@2
	MUL		4.000000 , p::x --> (float)@3
	MUL		@3 , p::x --> (float)@4
	MUL		@4 , p::x --> (float)@5
	SUB		@2 , @5 --> (float)@6
	RET		@6

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002524620-----------------------------------------
float my_sin_impl ( float my_sin_impl::x )  : 
	CALL		my_fabs ( my_sin_impl::x )  --> (float)@7
	LE		@7 , EPSILON --> (float)@8
	IF_NOT_JMP		@8 --> .1
-------------------------------------NEXT:0x600002524700,0x6000025247e0-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002524700-----------------------------------------
	RET		my_sin_impl::x
------------------------------------------------------------------------------------------------------------
-----------------------------------------BASIC_BLOCK:0x6000025247e0-----------------------------------------
.1 : 
	DIV		my_sin_impl::x , 3.000000 --> (float)@9
	CALL		my_sin_impl ( @9 )  --> (float)@10
	CALL		p ( @10 )  --> (float)@11
	RET		@11

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x6000025249a0-----------------------------------------
float my_sin ( float my_sin::x )  : 
	GT		my_sin::x , TWO_PI --> (float)@12
	IF_JMP		@12 --> .2
-------------------------------------NEXT:0x600002524a80,0x600002524c40-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002524a80-----------------------------------------
	LT		my_sin::x , -6.283185 --> (float)@13
	IF_JMP		@13 --> .2
-------------------------------------NEXT:0x600002524b60,0x600002524c40-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002524b60-----------------------------------------
	JMP		.3
--------------------------------------------NEXT:0x600002524d20---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002524c40-----------------------------------------
.2 : 
	int my_sin::if_0::xx
	DIV		my_sin::x , TWO_PI --> (float)@14
	ASSIGN		@14 --> (int)@15
	NOP
	ASSIGN		@15 --> (float)@16
	MUL		@16 , TWO_PI --> (float)@17
	SUB		my_sin::x , @17 --> my_sin::x
--------------------------------------------NEXT:0x600002524d20---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002524d20-----------------------------------------
.3 : 
	GT		my_sin::x , PI --> (float)@19
	IF_NOT_JMP		@19 --> .4
-------------------------------------NEXT:0x600002524e00,0x600002524ee0-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002524e00-----------------------------------------
	SUB		my_sin::x , TWO_PI --> my_sin::x
--------------------------------------------NEXT:0x600002524ee0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002524ee0-----------------------------------------
.4 : 
	LT		my_sin::x , -3.141593 --> (float)@21
	IF_NOT_JMP		@21 --> .5
-------------------------------------NEXT:0x600002524fc0,0x6000025250a0-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002524fc0-----------------------------------------
	ADD		my_sin::x , TWO_PI --> my_sin::x
--------------------------------------------NEXT:0x6000025250a0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x6000025250a0-----------------------------------------
.5 : 
	CALL		my_sin_impl ( my_sin::x )  --> (float)@23
	RET		@23

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002525260-----------------------------------------
float my_cos ( float my_cos::x )  : 
	ADD		my_cos::x , 1.570796 --> (float)@24
	CALL		my_sin ( @24 )  --> (float)@25
	RET		@25

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002525420-----------------------------------------
void write_mat ( float write_mat::mat[0][MAX_DIM_Y] , int write_mat::n , int write_mat::m )  : 
	int write_mat::i
	ASSIGN		0 --> write_mat::i
--------------------------------------------NEXT:0x600002525500---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002525500-----------------------------------------
.6 : 
	LT		write_mat::i , write_mat::n --> (int)@26
	IF_NOT_JMP		@26 --> .9
-------------------------------------NEXT:0x6000025255e0,0x600002525960-------------------------------------
-----------------------------------------BASIC_BLOCK:0x6000025255e0-----------------------------------------
	int write_mat::while_0::j
	MUL		write_mat::i , 8 --> (int)@28
	CALL		putfloat ( write_mat::mat[@28] ) 
	ASSIGN		1 --> write_mat::while_0::j
--------------------------------------------NEXT:0x6000025256c0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x6000025256c0-----------------------------------------
.7 : 
	LT		write_mat::while_0::j , write_mat::m --> (int)@29
	IF_NOT_JMP		@29 --> .8
-------------------------------------NEXT:0x6000025257a0,0x600002525880-------------------------------------
-----------------------------------------BASIC_BLOCK:0x6000025257a0-----------------------------------------
	CALL		putch ( 32 ) 
	NOP
	MUL		write_mat::i , 8 --> (int)@32
	ADD		@32 , write_mat::while_0::j --> (int)@33
	CALL		putfloat ( write_mat::mat[@33] ) 
	ADD		write_mat::while_0::j , 1 --> write_mat::while_0::j
	JMP		.7
--------------------------------------------NEXT:0x6000025256c0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002525880-----------------------------------------
.8 : 
	CALL		putch ( 10 ) 
	ADD		write_mat::i , 1 --> write_mat::i
	JMP		.6
--------------------------------------------NEXT:0x600002525500---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002525960-----------------------------------------
.9 : 
	CALL		putch ( 10 ) 
	RET

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002525b20-----------------------------------------
void dct ( float dct::dct_mat[0][MAX_DIM_Y] , float dct::mat[0][MAX_DIM_Y] , int dct::n , int dct::m )  : 
	int dct::u
	ASSIGN		0 --> dct::u
--------------------------------------------NEXT:0x600002525c00---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002525c00-----------------------------------------
.10 : 
	LT		dct::u , dct::n --> (int)@36
	IF_NOT_JMP		@36 --> .17
-------------------------------------NEXT:0x600002525ce0,0x6000025265a0-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002525ce0-----------------------------------------
	int dct::while_0::v
	ASSIGN		0 --> dct::while_0::v
--------------------------------------------NEXT:0x600002525dc0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002525dc0-----------------------------------------
.11 : 
	LT		dct::while_0::v , dct::m --> (int)@37
	IF_NOT_JMP		@37 --> .16
-------------------------------------NEXT:0x600002525ea0,0x6000025264c0-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002525ea0-----------------------------------------
	int dct::while_0::while_0::i
	NOP
	MUL		dct::u , 8 --> (int)@40
	ADD		@40 , dct::while_0::v --> (int)@41
	ASSIGN		0 --> dct::dct_mat[@41]
	ASSIGN		0 --> dct::while_0::while_0::i
--------------------------------------------NEXT:0x600002525f80---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002525f80-----------------------------------------
.12 : 
	LT		dct::while_0::while_0::i , dct::n --> (int)@42
	IF_NOT_JMP		@42 --> .15
-------------------------------------NEXT:0x600002526060,0x6000025263e0-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002526060-----------------------------------------
	int dct::while_0::while_0::while_0::j
	ASSIGN		0 --> dct::while_0::while_0::while_0::j
--------------------------------------------NEXT:0x600002526140---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002526140-----------------------------------------
.13 : 
	LT		dct::while_0::while_0::while_0::j , dct::m --> (int)@43
	IF_NOT_JMP		@43 --> .14
-------------------------------------NEXT:0x600002526220,0x600002526300-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002526220-----------------------------------------
	NOP
	MUL		dct::u , 8 --> (int)@46
	ADD		@46 , dct::while_0::v --> (int)@47
	NOP
	NOP
	NOP
	NOP
	MUL		dct::while_0::while_0::i , 8 --> (int)@54
	ADD		@54 , dct::while_0::while_0::while_0::j --> (int)@55
	ASSIGN		dct::n --> (float)@56
	DIV		PI , @56 --> (float)@57
	ASSIGN		dct::while_0::while_0::i --> (float)@58
	ADD		@58 , 0.500000 --> (float)@59
	MUL		@57 , @59 --> (float)@60
	ASSIGN		dct::u --> (float)@61
	MUL		@60 , @61 --> (float)@62
	CALL		my_cos ( @62 )  --> (float)@63
	MUL		dct::mat[@55] , @63 --> (float)@64
	ASSIGN		dct::m --> (float)@65
	DIV		PI , @65 --> (float)@66
	ASSIGN		dct::while_0::while_0::while_0::j --> (float)@67
	ADD		@67 , 0.500000 --> (float)@68
	MUL		@66 , @68 --> (float)@69
	ASSIGN		dct::while_0::v --> (float)@70
	MUL		@69 , @70 --> (float)@71
	CALL		my_cos ( @71 )  --> (float)@72
	MUL		@64 , @72 --> (float)@73
	ADD		dct::dct_mat[@47] , @73 --> dct::dct_mat[@47]
	ADD		dct::while_0::while_0::while_0::j , 1 --> dct::while_0::while_0::while_0::j
	JMP		.13
--------------------------------------------NEXT:0x600002526140---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002526300-----------------------------------------
.14 : 
	ADD		dct::while_0::while_0::i , 1 --> dct::while_0::while_0::i
	JMP		.12
--------------------------------------------NEXT:0x600002525f80---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x6000025263e0-----------------------------------------
.15 : 
	ADD		dct::while_0::v , 1 --> dct::while_0::v
	JMP		.11
--------------------------------------------NEXT:0x600002525dc0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x6000025264c0-----------------------------------------
.16 : 
	ADD		dct::u , 1 --> dct::u
	JMP		.10
--------------------------------------------NEXT:0x600002525c00---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x6000025265a0-----------------------------------------
.17 : 
	RET

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x600002526760-----------------------------------------
void idct ( float idct::mat[0][MAX_DIM_Y] , float idct::dct_mat[0][MAX_DIM_Y] , int idct::n , int idct::m )  : 
	int idct::u
	ASSIGN		0 --> idct::u
--------------------------------------------NEXT:0x600002526840---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002526840-----------------------------------------
.18 : 
	LT		idct::u , idct::n --> (int)@79
	IF_NOT_JMP		@79 --> .29
-------------------------------------NEXT:0x600002526920,0x600002527720-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002526920-----------------------------------------
	int idct::while_0::v
	ASSIGN		0 --> idct::while_0::v
--------------------------------------------NEXT:0x600002526a00---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002526a00-----------------------------------------
.19 : 
	LT		idct::while_0::v , idct::m --> (int)@80
	IF_NOT_JMP		@80 --> .28
-------------------------------------NEXT:0x600002526ae0,0x600002527640-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002526ae0-----------------------------------------
	int idct::while_0::while_0::i
	int idct::while_0::while_0::j
	NOP
	MUL		idct::u , 8 --> (int)@83
	ADD		@83 , idct::while_0::v --> (int)@84
	MUL		0.250000 , idct::dct_mat[0] --> idct::mat[@84]
	ASSIGN		1 --> idct::while_0::while_0::i
--------------------------------------------NEXT:0x600002526bc0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002526bc0-----------------------------------------
.20 : 
	LT		idct::while_0::while_0::i , idct::n --> (int)@86
	IF_NOT_JMP		@86 --> .21
-------------------------------------NEXT:0x600002526ca0,0x600002526d80-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002526ca0-----------------------------------------
	NOP
	MUL		idct::u , 8 --> (int)@89
	ADD		@89 , idct::while_0::v --> (int)@90
	NOP
	NOP
	NOP
	MUL		idct::while_0::while_0::i , 8 --> (int)@96
	MUL		0.500000 , idct::dct_mat[@96] --> (float)@97
	ADD		idct::mat[@90] , @97 --> idct::mat[@90]
	ADD		idct::while_0::while_0::i , 1 --> idct::while_0::while_0::i
	JMP		.20
--------------------------------------------NEXT:0x600002526bc0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002526d80-----------------------------------------
.21 : 
	ASSIGN		1 --> idct::while_0::while_0::j
--------------------------------------------NEXT:0x600002526e60---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002526e60-----------------------------------------
.22 : 
	LT		idct::while_0::while_0::j , idct::m --> (int)@100
	IF_NOT_JMP		@100 --> .23
-------------------------------------NEXT:0x600002526f40,0x600002527020-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002526f40-----------------------------------------
	NOP
	MUL		idct::u , 8 --> (int)@103
	ADD		@103 , idct::while_0::v --> (int)@104
	NOP
	NOP
	NOP
	NOP
	MUL		0.500000 , idct::dct_mat[idct::while_0::while_0::j] --> (float)@112
	ADD		idct::mat[@104] , @112 --> idct::mat[@104]
	ADD		idct::while_0::while_0::j , 1 --> idct::while_0::while_0::j
	JMP		.22
--------------------------------------------NEXT:0x600002526e60---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002527020-----------------------------------------
.23 : 
	ASSIGN		1 --> idct::while_0::while_0::i
--------------------------------------------NEXT:0x600002527100---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002527100-----------------------------------------
.24 : 
	LT		idct::while_0::while_0::i , idct::n --> (int)@115
	IF_NOT_JMP		@115 --> .27
-------------------------------------NEXT:0x6000025271e0,0x600002527560-------------------------------------
-----------------------------------------BASIC_BLOCK:0x6000025271e0-----------------------------------------
	ASSIGN		1 --> idct::while_0::while_0::j
--------------------------------------------NEXT:0x6000025272c0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x6000025272c0-----------------------------------------
.25 : 
	LT		idct::while_0::while_0::j , idct::m --> (int)@116
	IF_NOT_JMP		@116 --> .26
-------------------------------------NEXT:0x6000025273a0,0x600002527480-------------------------------------
-----------------------------------------BASIC_BLOCK:0x6000025273a0-----------------------------------------
	NOP
	MUL		idct::u , 8 --> (int)@119
	ADD		@119 , idct::while_0::v --> (int)@120
	NOP
	NOP
	NOP
	NOP
	MUL		idct::while_0::while_0::i , 8 --> (int)@127
	ADD		@127 , idct::while_0::while_0::j --> (int)@128
	ASSIGN		idct::n --> (float)@129
	DIV		PI , @129 --> (float)@130
	ASSIGN		idct::u --> (float)@131
	ADD		@131 , 0.500000 --> (float)@132
	MUL		@130 , @132 --> (float)@133
	ASSIGN		idct::while_0::while_0::i --> (float)@134
	MUL		@133 , @134 --> (float)@135
	CALL		my_cos ( @135 )  --> (float)@136
	MUL		idct::dct_mat[@128] , @136 --> (float)@137
	ASSIGN		idct::m --> (float)@138
	DIV		PI , @138 --> (float)@139
	ASSIGN		idct::while_0::v --> (float)@140
	ADD		@140 , 0.500000 --> (float)@141
	MUL		@139 , @141 --> (float)@142
	ASSIGN		idct::while_0::while_0::j --> (float)@143
	MUL		@142 , @143 --> (float)@144
	CALL		my_cos ( @144 )  --> (float)@145
	MUL		@137 , @145 --> (float)@146
	ADD		idct::mat[@120] , @146 --> idct::mat[@120]
	ADD		idct::while_0::while_0::j , 1 --> idct::while_0::while_0::j
	JMP		.25
--------------------------------------------NEXT:0x6000025272c0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002527480-----------------------------------------
.26 : 
	ADD		idct::while_0::while_0::i , 1 --> idct::while_0::while_0::i
	JMP		.24
--------------------------------------------NEXT:0x600002527100---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002527560-----------------------------------------
.27 : 
	NOP
	MUL		idct::u , 8 --> (int)@152
	ADD		@152 , idct::while_0::v --> (int)@153
	NOP
	NOP
	NOP
	MUL		idct::mat[@153] , 2.000000 --> (float)@158
	ASSIGN		idct::n --> (float)@159
	DIV		@158 , @159 --> (float)@160
	MUL		@160 , 2.000000 --> (float)@161
	ASSIGN		idct::m --> (float)@162
	DIV		@161 , @162 --> idct::mat[@153]
	ADD		idct::while_0::v , 1 --> idct::while_0::v
	JMP		.19
--------------------------------------------NEXT:0x600002526a00---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002527640-----------------------------------------
.28 : 
	ADD		idct::u , 1 --> idct::u
	JMP		.18
--------------------------------------------NEXT:0x600002526840---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002527720-----------------------------------------
.29 : 
	RET

------------------------------------------------------------------------------------------------------------
============================================================================================================

============================================================================================================
-----------------------------------------BASIC_BLOCK:0x6000025278e0-----------------------------------------
int main (  )  : 
	int main::dim_x
	int main::dim_y
	int main::i
	CALL		getint (  )  --> (int)@166
	CALL		getint (  )  --> (int)@167
	ASSIGN		@166 --> main::dim_x
	ASSIGN		@167 --> main::dim_y
	ASSIGN		0 --> main::i
--------------------------------------------NEXT:0x6000025279c0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x6000025279c0-----------------------------------------
.30 : 
	LT		main::i , main::dim_x --> (int)@168
	IF_NOT_JMP		@168 --> .33
-------------------------------------NEXT:0x600002527aa0,0x600002527e20-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002527aa0-----------------------------------------
	int main::while_0::j
	ASSIGN		0 --> main::while_0::j
--------------------------------------------NEXT:0x600002527b80---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002527b80-----------------------------------------
.31 : 
	LT		main::while_0::j , main::dim_y --> (int)@169
	IF_NOT_JMP		@169 --> .32
-------------------------------------NEXT:0x600002527c60,0x600002527d40-------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002527c60-----------------------------------------
	NOP
	MUL		main::i , 8 --> (int)@172
	ADD		@172 , main::while_0::j --> (int)@173
	CALL		getfloat (  )  --> test_block[@173]
	ADD		main::while_0::j , 1 --> main::while_0::j
	JMP		.31
--------------------------------------------NEXT:0x600002527b80---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002527d40-----------------------------------------
.32 : 
	ADD		main::i , 1 --> main::i
	JMP		.30
--------------------------------------------NEXT:0x6000025279c0---------------------------------------------
-----------------------------------------BASIC_BLOCK:0x600002527e20-----------------------------------------
.33 : 
	CALL		dct ( test_dct , test_block , main::dim_x , main::dim_y ) 
	CALL		write_mat ( test_dct , main::dim_x , main::dim_y ) 
	CALL		idct ( test_idct , test_dct , main::dim_x , main::dim_y ) 
	CALL		write_mat ( test_idct , main::dim_x , main::dim_y ) 
	RET		0

------------------------------------------------------------------------------------------------------------
============================================================================================================
