const int mod = 998244353
int d
int multiply ( int multiply::a , int multiply::b )  : 
	EQ		multiply::b , 0 --> (int)@0
	IF_NOT_JMP		@0 --> .0
	RET		0
.0 : 
	EQ		multiply::b , 1 --> (int)@1
	IF_NOT_JMP		@1 --> .1
	MOD		multiply::a , mod --> (int)@2
	RET		@2
.1 : 
	DIV		multiply::b , 2 --> (int)@3
	CALL		multiply ( multiply::a , @3 )  --> (int)@4
	int multiply::cur
	ASSIGN		@4 --> multiply::cur
	ADD		multiply::cur , multiply::cur --> (int)@5
	MOD		@5 , mod --> (int)@6
	ASSIGN		@6 --> multiply::cur
	MOD		multiply::b , 2 --> (int)@7
	EQ		@7 , 1 --> (int)@8
	IF_NOT_JMP		@8 --> .2
	ADD		multiply::cur , multiply::a --> (int)@9
	MOD		@9 , mod --> (int)@10
	RET		@10
	JMP		.3
.2 : 
	RET		multiply::cur
.3 : 

int power ( int power::a , int power::b )  : 
	EQ		power::b , 0 --> (int)@11
	IF_NOT_JMP		@11 --> .4
	RET		1
.4 : 
	DIV		power::b , 2 --> (int)@12
	CALL		power ( power::a , @12 )  --> (int)@13
	int power::cur
	ASSIGN		@13 --> power::cur
	CALL		multiply ( power::cur , power::cur )  --> (int)@14
	ASSIGN		@14 --> power::cur
	MOD		power::b , 2 --> (int)@15
	EQ		@15 , 1 --> (int)@16
	IF_NOT_JMP		@16 --> .5
	CALL		multiply ( power::cur , power::a )  --> (int)@17
	RET		@17
	JMP		.6
.5 : 
	RET		power::cur
.6 : 

const int maxlen = 2097152
int temp[maxlen]
int a[maxlen]
int b[maxlen]
int c[maxlen]
int memmove ( int memmove::dst[0] , int memmove::dst_pos , int memmove::src[0] , int memmove::len )  : 
	int memmove::i
	ASSIGN		0 --> memmove::i
.7 : 
	LT		memmove::i , memmove::len --> (int)@18
	IF_NOT_JMP		@18 --> .8
	ADD		memmove::dst_pos , memmove::i --> (int)@19
	MUL		@19 , 1 --> (int)@20
	ADD		@20 , 0 --> (int)@21
	MUL		memmove::i , 1 --> (int)@22
	ADD		@22 , 0 --> (int)@23
	ASSIGN		memmove::src[@23] --> memmove::dst[@21]
	ADD		memmove::i , 1 --> (int)@24
	ASSIGN		@24 --> memmove::i
	JMP		.7
.8 : 
	RET		memmove::i

int fft ( int fft::arr[0] , int fft::begin_pos , int fft::n , int fft::w )  : 
	EQ		fft::n , 1 --> (int)@25
	IF_NOT_JMP		@25 --> .9
	RET		1
.9 : 
	int fft::i
	ASSIGN		0 --> fft::i
.10 : 
	LT		fft::i , fft::n --> (int)@26
	IF_NOT_JMP		@26 --> .13
	MOD		fft::i , 2 --> (int)@27
	EQ		@27 , 0 --> (int)@28
	IF_NOT_JMP		@28 --> .11
	DIV		fft::i , 2 --> (int)@29
	MUL		@29 , 1 --> (int)@30
	ADD		@30 , 0 --> (int)@31
	ADD		fft::i , fft::begin_pos --> (int)@32
	MUL		@32 , 1 --> (int)@33
	ADD		@33 , 0 --> (int)@34
	ASSIGN		fft::arr[@34] --> temp[@31]
	JMP		.12
.11 : 
	DIV		fft::n , 2 --> (int)@35
	DIV		fft::i , 2 --> (int)@36
	ADD		@35 , @36 --> (int)@37
	MUL		@37 , 1 --> (int)@38
	ADD		@38 , 0 --> (int)@39
	ADD		fft::i , fft::begin_pos --> (int)@40
	MUL		@40 , 1 --> (int)@41
	ADD		@41 , 0 --> (int)@42
	ASSIGN		fft::arr[@42] --> temp[@39]
.12 : 
	ADD		fft::i , 1 --> (int)@43
	ASSIGN		@43 --> fft::i
	JMP		.10
.13 : 
	CALL		memmove ( fft::arr , fft::begin_pos , temp , fft::n )  --> (int)@44
	DIV		fft::n , 2 --> (int)@45
	CALL		multiply ( fft::w , fft::w )  --> (int)@46
	CALL		fft ( fft::arr , fft::begin_pos , @45 , @46 )  --> (int)@47
	DIV		fft::n , 2 --> (int)@48
	ADD		fft::begin_pos , @48 --> (int)@49
	DIV		fft::n , 2 --> (int)@50
	CALL		multiply ( fft::w , fft::w )  --> (int)@51
	CALL		fft ( fft::arr , @49 , @50 , @51 )  --> (int)@52
	ASSIGN		0 --> fft::i
	int fft::wn
	ASSIGN		1 --> fft::wn
.14 : 
	DIV		fft::n , 2 --> (int)@53
	LT		fft::i , @53 --> (int)@54
	IF_NOT_JMP		@54 --> .15
	ADD		fft::begin_pos , fft::i --> (int)@55
	MUL		@55 , 1 --> (int)@56
	ADD		@56 , 0 --> (int)@57
	int fft::while_1::x
	ASSIGN		fft::arr[@57] --> fft::while_1::x
	ADD		fft::begin_pos , fft::i --> (int)@58
	DIV		fft::n , 2 --> (int)@59
	ADD		@58 , @59 --> (int)@60
	MUL		@60 , 1 --> (int)@61
	ADD		@61 , 0 --> (int)@62
	int fft::while_1::y
	ASSIGN		fft::arr[@62] --> fft::while_1::y
	ADD		fft::begin_pos , fft::i --> (int)@63
	MUL		@63 , 1 --> (int)@64
	ADD		@64 , 0 --> (int)@65
	CALL		multiply ( fft::wn , fft::while_1::y )  --> (int)@66
	ADD		fft::while_1::x , @66 --> (int)@67
	MOD		@67 , mod --> (int)@68
	ASSIGN		@68 --> fft::arr[@65]
	ADD		fft::begin_pos , fft::i --> (int)@69
	DIV		fft::n , 2 --> (int)@70
	ADD		@69 , @70 --> (int)@71
	MUL		@71 , 1 --> (int)@72
	ADD		@72 , 0 --> (int)@73
	CALL		multiply ( fft::wn , fft::while_1::y )  --> (int)@74
	SUB		fft::while_1::x , @74 --> (int)@75
	ADD		@75 , mod --> (int)@76
	MOD		@76 , mod --> (int)@77
	ASSIGN		@77 --> fft::arr[@73]
	CALL		multiply ( fft::wn , fft::w )  --> (int)@78
	ASSIGN		@78 --> fft::wn
	ADD		fft::i , 1 --> (int)@79
	ASSIGN		@79 --> fft::i
	JMP		.14
.15 : 
	RET		0

int main (  )  : 
	CALL		getarray ( a )  --> (int)@80
	int main::n
	ASSIGN		@80 --> main::n
	CALL		getarray ( b )  --> (int)@81
	int main::m
	ASSIGN		@81 --> main::m
	CALL		_sysy_starttime ( 60 ) 
	ASSIGN		1 --> d
.16 : 
	ADD		main::n , main::m --> (int)@82
	SUB		@82 , 1 --> (int)@83
	LT		d , @83 --> (int)@84
	IF_NOT_JMP		@84 --> .17
	MUL		d , 2 --> (int)@85
	ASSIGN		@85 --> d
	JMP		.16
.17 : 
	DIV		998244352 , d --> (int)@86
	CALL		power ( 3 , @86 )  --> (int)@87
	CALL		fft ( a , 0 , d , @87 )  --> (int)@88
	DIV		998244352 , d --> (int)@89
	CALL		power ( 3 , @89 )  --> (int)@90
	CALL		fft ( b , 0 , d , @90 )  --> (int)@91
	int main::i
	ASSIGN		0 --> main::i
.18 : 
	LT		main::i , d --> (int)@92
	IF_NOT_JMP		@92 --> .19
	MUL		main::i , 1 --> (int)@93
	ADD		@93 , 0 --> (int)@94
	MUL		main::i , 1 --> (int)@95
	ADD		@95 , 0 --> (int)@96
	MUL		main::i , 1 --> (int)@97
	ADD		@97 , 0 --> (int)@98
	CALL		multiply ( a[@96] , b[@98] )  --> (int)@99
	ASSIGN		@99 --> a[@94]
	ADD		main::i , 1 --> (int)@100
	ASSIGN		@100 --> main::i
	JMP		.18
.19 : 
	DIV		998244352 , d --> (int)@101
	SUB		998244352 , @101 --> (int)@102
	CALL		power ( 3 , @102 )  --> (int)@103
	CALL		fft ( a , 0 , d , @103 )  --> (int)@104
	ASSIGN		0 --> main::i
.20 : 
	LT		main::i , d --> (int)@105
	IF_NOT_JMP		@105 --> .21
	MUL		main::i , 1 --> (int)@106
	ADD		@106 , 0 --> (int)@107
	MUL		main::i , 1 --> (int)@108
	ADD		@108 , 0 --> (int)@109
	CALL		power ( d , 998244351 )  --> (int)@110
	CALL		multiply ( a[@109] , @110 )  --> (int)@111
	ASSIGN		@111 --> a[@107]
	ADD		main::i , 1 --> (int)@112
	ASSIGN		@112 --> main::i
	JMP		.20
.21 : 
	CALL		_sysy_stoptime ( 79 ) 
	ADD		main::n , main::m --> (int)@113
	SUB		@113 , 1 --> (int)@114
	CALL		putarray ( @114 , a ) 
	RET		0

