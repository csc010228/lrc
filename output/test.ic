int hashmod
const int maxn = 10000000
const int maxm = 10000000
int bucket[maxn]
int head[maxn]
int next[maxm]
int nextvalue[maxm]
int key[maxm]
int value[maxm]
int cnt
int keys[maxm]
int values[maxm]
int requests[maxm]
int ans[maxm]
int hash ( int hash::k )  : 
	MOD		hash::k , hashmod --> (int)@0
	RET		@0

int insert ( int insert::k , int insert::v )  : 
	CALL		hash ( insert::k )  --> (int)@1
	int insert::h
	ASSIGN		@1 --> insert::h
	MUL		insert::h , 1 --> (int)@2
	ADD		@2 , 0 --> (int)@3
	EQ		head[@3] , 0 --> (int)@4
	IF_NOT_JMP		@4 --> .0
	ADD		cnt , 1 --> (int)@5
	ASSIGN		@5 --> cnt
	MUL		insert::h , 1 --> (int)@6
	ADD		@6 , 0 --> (int)@7
	ASSIGN		cnt --> head[@7]
	MUL		cnt , 1 --> (int)@8
	ADD		@8 , 0 --> (int)@9
	ASSIGN		insert::k --> key[@9]
	MUL		cnt , 1 --> (int)@10
	ADD		@10 , 0 --> (int)@11
	ASSIGN		insert::v --> value[@11]
	MUL		cnt , 1 --> (int)@12
	ADD		@12 , 0 --> (int)@13
	ASSIGN		0 --> next[@13]
	MUL		cnt , 1 --> (int)@14
	ADD		@14 , 0 --> (int)@15
	ASSIGN		0 --> nextvalue[@15]
	RET		0
.0 : 
	MUL		insert::h , 1 --> (int)@16
	ADD		@16 , 0 --> (int)@17
	int insert::p
	ASSIGN		head[@17] --> insert::p
.1 : 
	UEQ		insert::p , 0 --> (int)@18
	IF_NOT_JMP		@18 --> .3
	MUL		insert::p , 1 --> (int)@19
	ADD		@19 , 0 --> (int)@20
	EQ		key[@20] , insert::k --> (int)@21
	IF_NOT_JMP		@21 --> .2
	ADD		cnt , 1 --> (int)@22
	ASSIGN		@22 --> cnt
	MUL		cnt , 1 --> (int)@23
	ADD		@23 , 0 --> (int)@24
	MUL		insert::p , 1 --> (int)@25
	ADD		@25 , 0 --> (int)@26
	ASSIGN		nextvalue[@26] --> nextvalue[@24]
	MUL		insert::p , 1 --> (int)@27
	ADD		@27 , 0 --> (int)@28
	ASSIGN		cnt --> nextvalue[@28]
	MUL		cnt , 1 --> (int)@29
	ADD		@29 , 0 --> (int)@30
	ASSIGN		insert::v --> value[@30]
	RET		1
.2 : 
	MUL		insert::p , 1 --> (int)@31
	ADD		@31 , 0 --> (int)@32
	ASSIGN		next[@32] --> insert::p
	JMP		.1
.3 : 
	ADD		cnt , 1 --> (int)@33
	ASSIGN		@33 --> cnt
	MUL		cnt , 1 --> (int)@34
	ADD		@34 , 0 --> (int)@35
	MUL		insert::h , 1 --> (int)@36
	ADD		@36 , 0 --> (int)@37
	ASSIGN		head[@37] --> next[@35]
	MUL		insert::h , 1 --> (int)@38
	ADD		@38 , 0 --> (int)@39
	ASSIGN		cnt --> head[@39]
	MUL		cnt , 1 --> (int)@40
	ADD		@40 , 0 --> (int)@41
	ASSIGN		insert::k --> key[@41]
	MUL		cnt , 1 --> (int)@42
	ADD		@42 , 0 --> (int)@43
	ASSIGN		insert::v --> value[@43]
	MUL		cnt , 1 --> (int)@44
	ADD		@44 , 0 --> (int)@45
	ASSIGN		0 --> nextvalue[@45]
	RET		0

int reduce ( int reduce::k )  : 
	CALL		hash ( reduce::k )  --> (int)@46
	int reduce::h
	ASSIGN		@46 --> reduce::h
	MUL		reduce::h , 1 --> (int)@47
	ADD		@47 , 0 --> (int)@48
	int reduce::p
	ASSIGN		head[@48] --> reduce::p
.4 : 
	UEQ		reduce::p , 0 --> (int)@49
	IF_NOT_JMP		@49 --> .8
	MUL		reduce::p , 1 --> (int)@50
	ADD		@50 , 0 --> (int)@51
	EQ		key[@51] , reduce::k --> (int)@52
	IF_NOT_JMP		@52 --> .7
	int reduce::while_0::if_0::ret
	ASSIGN		0 --> reduce::while_0::if_0::ret
	int reduce::while_0::if_0::x
	ASSIGN		reduce::p --> reduce::while_0::if_0::x
.5 : 
	UEQ		reduce::while_0::if_0::x , 0 --> (int)@53
	IF_NOT_JMP		@53 --> .6
	MUL		reduce::while_0::if_0::x , 1 --> (int)@54
	ADD		@54 , 0 --> (int)@55
	ADD		reduce::while_0::if_0::ret , value[@55] --> (int)@56
	ASSIGN		@56 --> reduce::while_0::if_0::ret
	MUL		reduce::while_0::if_0::x , 1 --> (int)@57
	ADD		@57 , 0 --> (int)@58
	ASSIGN		nextvalue[@58] --> reduce::while_0::if_0::x
	JMP		.5
.6 : 
	RET		reduce::while_0::if_0::ret
.7 : 
	MUL		reduce::p , 1 --> (int)@59
	ADD		@59 , 0 --> (int)@60
	ASSIGN		next[@60] --> reduce::p
	JMP		.4
.8 : 
	RET		0

int main (  )  : 
	CALL		getint (  )  --> (int)@61
	ASSIGN		@61 --> hashmod
	CALL		getarray ( keys )  --> (int)@62
	int main::ks
	ASSIGN		@62 --> main::ks
	CALL		getarray ( values )  --> (int)@63
	int main::vs
	ASSIGN		@63 --> main::vs
	CALL		getarray ( requests )  --> (int)@64
	int main::ms
	ASSIGN		@64 --> main::ms
	CALL		_sysy_starttime ( 78 ) 
	int main::i
	ASSIGN		0 --> main::i
.9 : 
	LT		main::i , main::ks --> (int)@65
	IF_NOT_JMP		@65 --> .10
	MUL		main::i , 1 --> (int)@66
	ADD		@66 , 0 --> (int)@67
	MUL		main::i , 1 --> (int)@68
	ADD		@68 , 0 --> (int)@69
	CALL		insert ( keys[@67] , values[@69] )  --> (int)@70
	ADD		main::i , 1 --> (int)@71
	ASSIGN		@71 --> main::i
	JMP		.9
.10 : 
	ASSIGN		0 --> main::i
.11 : 
	LT		main::i , main::ms --> (int)@72
	IF_NOT_JMP		@72 --> .12
	MUL		main::i , 1 --> (int)@73
	ADD		@73 , 0 --> (int)@74
	MUL		main::i , 1 --> (int)@75
	ADD		@75 , 0 --> (int)@76
	CALL		reduce ( requests[@76] )  --> (int)@77
	ASSIGN		@77 --> ans[@74]
	ADD		main::i , 1 --> (int)@78
	ASSIGN		@78 --> main::i
	JMP		.11
.12 : 
	CALL		_sysy_stoptime ( 90 ) 
	CALL		putarray ( main::ms , ans ) 
	RET		0

