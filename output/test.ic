const int INF = 1879048192
int size[10]
int to[10][10]
int cap[10][10]
int rev[10][10]
int used[10]
void my_memset ( int my_memset::arr[0] , int my_memset::val , int my_memset::n )  : 
	int my_memset::i
	ASSIGN		0 --> my_memset::i
.0 : 
	LT		my_memset::i , my_memset::n --> (int)@0
	IF_NOT_JMP		@0 --> .1
	MUL		my_memset::i , 1 --> (int)@1
	ADD		@1 , 0 --> (int)@2
	ASSIGN		my_memset::val --> my_memset::arr[@2]
	ADD		my_memset::i , 1 --> (int)@3
	ASSIGN		@3 --> my_memset::i
	JMP		.0
.1 : 
	RET

void add_node ( int add_node::u , int add_node::v , int add_node::c )  : 
	MUL		add_node::u , 1 --> (int)@4
	ADD		@4 , 0 --> (int)@5
	MUL		size[@5] , 1 --> (int)@6
	ADD		@6 , 0 --> (int)@7
	MUL		add_node::u , 10 --> (int)@8
	ADD		@8 , @7 --> (int)@9
	ASSIGN		add_node::v --> to[@9]
	MUL		add_node::u , 1 --> (int)@10
	ADD		@10 , 0 --> (int)@11
	MUL		size[@11] , 1 --> (int)@12
	ADD		@12 , 0 --> (int)@13
	MUL		add_node::u , 10 --> (int)@14
	ADD		@14 , @13 --> (int)@15
	ASSIGN		add_node::c --> cap[@15]
	MUL		add_node::u , 1 --> (int)@16
	ADD		@16 , 0 --> (int)@17
	MUL		size[@17] , 1 --> (int)@18
	ADD		@18 , 0 --> (int)@19
	MUL		add_node::u , 10 --> (int)@20
	ADD		@20 , @19 --> (int)@21
	MUL		add_node::v , 1 --> (int)@22
	ADD		@22 , 0 --> (int)@23
	ASSIGN		size[@23] --> rev[@21]
	MUL		add_node::v , 1 --> (int)@24
	ADD		@24 , 0 --> (int)@25
	MUL		size[@25] , 1 --> (int)@26
	ADD		@26 , 0 --> (int)@27
	MUL		add_node::v , 10 --> (int)@28
	ADD		@28 , @27 --> (int)@29
	ASSIGN		add_node::u --> to[@29]
	MUL		add_node::v , 1 --> (int)@30
	ADD		@30 , 0 --> (int)@31
	MUL		size[@31] , 1 --> (int)@32
	ADD		@32 , 0 --> (int)@33
	MUL		add_node::v , 10 --> (int)@34
	ADD		@34 , @33 --> (int)@35
	ASSIGN		0 --> cap[@35]
	MUL		add_node::v , 1 --> (int)@36
	ADD		@36 , 0 --> (int)@37
	MUL		size[@37] , 1 --> (int)@38
	ADD		@38 , 0 --> (int)@39
	MUL		add_node::v , 10 --> (int)@40
	ADD		@40 , @39 --> (int)@41
	MUL		add_node::u , 1 --> (int)@42
	ADD		@42 , 0 --> (int)@43
	ASSIGN		size[@43] --> rev[@41]
	MUL		add_node::u , 1 --> (int)@44
	ADD		@44 , 0 --> (int)@45
	MUL		add_node::u , 1 --> (int)@46
	ADD		@46 , 0 --> (int)@47
	ADD		size[@47] , 1 --> (int)@48
	ASSIGN		@48 --> size[@45]
	MUL		add_node::v , 1 --> (int)@49
	ADD		@49 , 0 --> (int)@50
	MUL		add_node::v , 1 --> (int)@51
	ADD		@51 , 0 --> (int)@52
	ADD		size[@52] , 1 --> (int)@53
	ASSIGN		@53 --> size[@50]
	RET

int dfs ( int dfs::s , int dfs::t , int dfs::f )  : 
	EQ		dfs::s , dfs::t --> (int)@54
	IF_NOT_JMP		@54 --> .2
	RET		dfs::f
.2 : 
	MUL		dfs::s , 1 --> (int)@55
	ADD		@55 , 0 --> (int)@56
	ASSIGN		1 --> used[@56]
	int dfs::i
	ASSIGN		0 --> dfs::i
.3 : 
	MUL		dfs::s , 1 --> (int)@57
	ADD		@57 , 0 --> (int)@58
	LT		dfs::i , size[@58] --> (int)@59
	IF_NOT_JMP		@59 --> .9
	MUL		dfs::i , 1 --> (int)@60
	ADD		@60 , 0 --> (int)@61
	MUL		dfs::s , 10 --> (int)@62
	ADD		@62 , @61 --> (int)@63
	MUL		to[@63] , 1 --> (int)@64
	ADD		@64 , 0 --> (int)@65
	IF_NOT_JMP		used[@65] --> .4
	ADD		dfs::i , 1 --> (int)@66
	ASSIGN		@66 --> dfs::i
	JMP		.3
.4 : 
	MUL		dfs::i , 1 --> (int)@67
	ADD		@67 , 0 --> (int)@68
	MUL		dfs::s , 10 --> (int)@69
	ADD		@69 , @68 --> (int)@70
	LE		cap[@70] , 0 --> (int)@71
	IF_NOT_JMP		@71 --> .5
	ADD		dfs::i , 1 --> (int)@72
	ASSIGN		@72 --> dfs::i
	JMP		.3
.5 : 
	int dfs::while_0::min_f
	MUL		dfs::i , 1 --> (int)@73
	ADD		@73 , 0 --> (int)@74
	MUL		dfs::s , 10 --> (int)@75
	ADD		@75 , @74 --> (int)@76
	LT		dfs::f , cap[@76] --> (int)@77
	IF_NOT_JMP		@77 --> .6
	ASSIGN		dfs::f --> dfs::while_0::min_f
	JMP		.7
.6 : 
	MUL		dfs::i , 1 --> (int)@78
	ADD		@78 , 0 --> (int)@79
	MUL		dfs::s , 10 --> (int)@80
	ADD		@80 , @79 --> (int)@81
	ASSIGN		cap[@81] --> dfs::while_0::min_f
.7 : 
	MUL		dfs::i , 1 --> (int)@82
	ADD		@82 , 0 --> (int)@83
	MUL		dfs::s , 10 --> (int)@84
	ADD		@84 , @83 --> (int)@85
	CALL		dfs ( to[@85] , dfs::t , dfs::while_0::min_f )  --> (int)@86
	int dfs::while_0::d
	ASSIGN		@86 --> dfs::while_0::d
	GT		dfs::while_0::d , 0 --> (int)@87
	IF_NOT_JMP		@87 --> .8
	MUL		dfs::i , 1 --> (int)@88
	ADD		@88 , 0 --> (int)@89
	MUL		dfs::s , 10 --> (int)@90
	ADD		@90 , @89 --> (int)@91
	MUL		dfs::i , 1 --> (int)@92
	ADD		@92 , 0 --> (int)@93
	MUL		dfs::s , 10 --> (int)@94
	ADD		@94 , @93 --> (int)@95
	SUB		cap[@95] , dfs::while_0::d --> (int)@96
	ASSIGN		@96 --> cap[@91]
	MUL		dfs::i , 1 --> (int)@97
	ADD		@97 , 0 --> (int)@98
	MUL		dfs::s , 10 --> (int)@99
	ADD		@99 , @98 --> (int)@100
	MUL		dfs::i , 1 --> (int)@101
	ADD		@101 , 0 --> (int)@102
	MUL		dfs::s , 10 --> (int)@103
	ADD		@103 , @102 --> (int)@104
	MUL		rev[@104] , 1 --> (int)@105
	ADD		@105 , 0 --> (int)@106
	MUL		to[@100] , 10 --> (int)@107
	ADD		@107 , @106 --> (int)@108
	MUL		dfs::i , 1 --> (int)@109
	ADD		@109 , 0 --> (int)@110
	MUL		dfs::s , 10 --> (int)@111
	ADD		@111 , @110 --> (int)@112
	MUL		dfs::i , 1 --> (int)@113
	ADD		@113 , 0 --> (int)@114
	MUL		dfs::s , 10 --> (int)@115
	ADD		@115 , @114 --> (int)@116
	MUL		rev[@116] , 1 --> (int)@117
	ADD		@117 , 0 --> (int)@118
	MUL		to[@112] , 10 --> (int)@119
	ADD		@119 , @118 --> (int)@120
	ADD		cap[@120] , dfs::while_0::d --> (int)@121
	ASSIGN		@121 --> cap[@108]
	RET		dfs::while_0::d
.8 : 
	ADD		dfs::i , 1 --> (int)@122
	ASSIGN		@122 --> dfs::i
	JMP		.3
.9 : 
	RET		0

int max_flow ( int max_flow::s , int max_flow::t )  : 
	int max_flow::flow
	ASSIGN		0 --> max_flow::flow
.10 : 
	CALL		my_memset ( used , 0 , 10 ) 
	CALL		dfs ( max_flow::s , max_flow::t , INF )  --> (int)@123
	int max_flow::while_0::f
	ASSIGN		@123 --> max_flow::while_0::f
	EQ		max_flow::while_0::f , 0 --> (int)@124
	IF_NOT_JMP		@124 --> .11
	RET		max_flow::flow
.11 : 
	ADD		max_flow::flow , max_flow::while_0::f --> (int)@125
	ASSIGN		@125 --> max_flow::flow
	JMP		.10
.12 : 

int main (  )  : 
	int main::V
	int main::E
	CALL		getint (  )  --> (int)@126
	ASSIGN		@126 --> main::V
	CALL		getint (  )  --> (int)@127
	ASSIGN		@127 --> main::E
	CALL		my_memset ( size , 0 , 10 ) 
.13 : 
	GT		main::E , 0 --> (int)@128
	IF_NOT_JMP		@128 --> .14
	int main::while_0::u
	int main::while_0::v
	CALL		getint (  )  --> (int)@129
	ASSIGN		@129 --> main::while_0::u
	CALL		getint (  )  --> (int)@130
	ASSIGN		@130 --> main::while_0::v
	CALL		getint (  )  --> (int)@131
	int main::while_0::c
	ASSIGN		@131 --> main::while_0::c
	CALL		add_node ( main::while_0::u , main::while_0::v , main::while_0::c ) 
	SUB		main::E , 1 --> (int)@132
	ASSIGN		@132 --> main::E
	JMP		.13
.14 : 
	CALL		max_flow ( 1 , main::V )  --> (int)@133
	CALL		putint ( @133 ) 
	CALL		putch ( 10 ) 
	RET		0

