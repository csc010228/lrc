const int MAX_DIM_X = 8
const int MAX_DIM_Y = 8
float test_block[MAX_DIM_X][MAX_DIM_Y]
float test_dct[MAX_DIM_X][MAX_DIM_Y]
float test_idct[MAX_DIM_X][MAX_DIM_Y]
const float PI = 3.141593
const float TWO_PI = 6.283185
const float EPSILON = 0.000001
float my_fabs ( float my_fabs::x )  : 
	GT		my_fabs::x , 0.000000 --> (float)@0
	IF_NOT_JMP		@0 --> .0
	RET		my_fabs::x
.0 : 
	SUB		0.000000 , my_fabs::x --> (float)@1
	RET		@1

float p ( float p::x )  : 
	MUL		3.000000 , p::x --> (float)@2
	MUL		4.000000 , p::x --> (float)@3
	MUL		@3 , p::x --> (float)@4
	MUL		@4 , p::x --> (float)@5
	SUB		@2 , @5 --> (float)@6
	RET		@6

float my_sin_impl ( float my_sin_impl::x )  : 
	CALL		my_fabs ( my_sin_impl::x )  --> (float)@7
	LE		@7 , EPSILON --> (float)@8
	IF_NOT_JMP		@8 --> .1
	RET		my_sin_impl::x
.1 : 
	DIV		my_sin_impl::x , 3.000000 --> (float)@9
	CALL		my_sin_impl ( @9 )  --> (float)@10
	CALL		p ( @10 )  --> (float)@11
	RET		@11

float my_sin ( float my_sin::x )  : 
	GT		my_sin::x , TWO_PI --> (float)@12
	IF_JMP		@12 --> .2
	LT		my_sin::x , -6.283185 --> (float)@13
	IF_JMP		@13 --> .2
	JMP		.3
.2 : 
	DIV		my_sin::x , TWO_PI --> (float)@14
	ASSIGN		@14 --> (int)@15
	int my_sin::if_0::xx
	ASSIGN		@15 --> my_sin::if_0::xx
	ASSIGN		my_sin::if_0::xx --> (float)@16
	MUL		@16 , TWO_PI --> (float)@17
	SUB		my_sin::x , @17 --> (float)@18
	ASSIGN		@18 --> my_sin::x
.3 : 
	GT		my_sin::x , PI --> (float)@19
	IF_NOT_JMP		@19 --> .4
	SUB		my_sin::x , TWO_PI --> (float)@20
	ASSIGN		@20 --> my_sin::x
.4 : 
	LT		my_sin::x , -3.141593 --> (float)@21
	IF_NOT_JMP		@21 --> .5
	ADD		my_sin::x , TWO_PI --> (float)@22
	ASSIGN		@22 --> my_sin::x
.5 : 
	CALL		my_sin_impl ( my_sin::x )  --> (float)@23
	RET		@23

float my_cos ( float my_cos::x )  : 
	ADD		my_cos::x , 1.570796 --> (float)@24
	CALL		my_sin ( @24 )  --> (float)@25
	RET		@25

void write_mat ( float write_mat::mat[0][MAX_DIM_Y] , int write_mat::n , int write_mat::m )  : 
	int write_mat::i
	ASSIGN		0 --> write_mat::i
.6 : 
	LT		write_mat::i , write_mat::n --> (int)@26
	IF_NOT_JMP		@26 --> .9
	MUL		write_mat::i , 8 --> (int)@27
	ADD		@27 , 0 --> (int)@28
	CALL		putfloat ( write_mat::mat[@28] ) 
	int write_mat::while_0::j
	ASSIGN		1 --> write_mat::while_0::j
.7 : 
	LT		write_mat::while_0::j , write_mat::m --> (int)@29
	IF_NOT_JMP		@29 --> .8
	CALL		putch ( 32 ) 
	MUL		write_mat::while_0::j , 1 --> (int)@30
	ADD		@30 , 0 --> (int)@31
	MUL		write_mat::i , 8 --> (int)@32
	ADD		@32 , @31 --> (int)@33
	CALL		putfloat ( write_mat::mat[@33] ) 
	ADD		write_mat::while_0::j , 1 --> (int)@34
	ASSIGN		@34 --> write_mat::while_0::j
	JMP		.7
.8 : 
	CALL		putch ( 10 ) 
	ADD		write_mat::i , 1 --> (int)@35
	ASSIGN		@35 --> write_mat::i
	JMP		.6
.9 : 
	CALL		putch ( 10 ) 
	RET

void dct ( float dct::dct_mat[0][MAX_DIM_Y] , float dct::mat[0][MAX_DIM_Y] , int dct::n , int dct::m )  : 
	int dct::u
	ASSIGN		0 --> dct::u
.10 : 
	LT		dct::u , dct::n --> (int)@36
	IF_NOT_JMP		@36 --> .17
	int dct::while_0::v
	ASSIGN		0 --> dct::while_0::v
.11 : 
	LT		dct::while_0::v , dct::m --> (int)@37
	IF_NOT_JMP		@37 --> .16
	MUL		dct::while_0::v , 1 --> (int)@38
	ADD		@38 , 0 --> (int)@39
	MUL		dct::u , 8 --> (int)@40
	ADD		@40 , @39 --> (int)@41
	ASSIGN		0 --> dct::dct_mat[@41]
	int dct::while_0::while_0::i
	ASSIGN		0 --> dct::while_0::while_0::i
.12 : 
	LT		dct::while_0::while_0::i , dct::n --> (int)@42
	IF_NOT_JMP		@42 --> .15
	int dct::while_0::while_0::while_0::j
	ASSIGN		0 --> dct::while_0::while_0::while_0::j
.13 : 
	LT		dct::while_0::while_0::while_0::j , dct::m --> (int)@43
	IF_NOT_JMP		@43 --> .14
	MUL		dct::while_0::v , 1 --> (int)@44
	ADD		@44 , 0 --> (int)@45
	MUL		dct::u , 8 --> (int)@46
	ADD		@46 , @45 --> (int)@47
	MUL		dct::while_0::v , 1 --> (int)@48
	ADD		@48 , 0 --> (int)@49
	MUL		dct::u , 8 --> (int)@50
	ADD		@50 , @49 --> (int)@51
	MUL		dct::while_0::while_0::while_0::j , 1 --> (int)@52
	ADD		@52 , 0 --> (int)@53
	MUL		dct::while_0::while_0::i , 8 --> (int)@54
	ADD		@54 , @53 --> (int)@55
	ASSIGN		dct::n --> (float)@56
	DIV		PI , @56 --> (float)@57
	ASSIGN		dct::while_0::while_0::i --> (float)@58
	ADD		@58 , 0.500000 --> (float)@59
	MUL		@57 , @59 --> (float)@60
	ASSIGN		dct::u --> (float)@61
	MUL		@60 , @61 --> (float)@62
	CALL		my_cos ( @62 )  --> (float)@63
	MUL		dct::mat[@55] , @63 --> (float)@64
	ASSIGN		dct::m --> (float)@65
	DIV		PI , @65 --> (float)@66
	ASSIGN		dct::while_0::while_0::while_0::j --> (float)@67
	ADD		@67 , 0.500000 --> (float)@68
	MUL		@66 , @68 --> (float)@69
	ASSIGN		dct::while_0::v --> (float)@70
	MUL		@69 , @70 --> (float)@71
	CALL		my_cos ( @71 )  --> (float)@72
	MUL		@64 , @72 --> (float)@73
	ADD		dct::dct_mat[@51] , @73 --> (float)@74
	ASSIGN		@74 --> dct::dct_mat[@47]
	ADD		dct::while_0::while_0::while_0::j , 1 --> (int)@75
	ASSIGN		@75 --> dct::while_0::while_0::while_0::j
	JMP		.13
.14 : 
	ADD		dct::while_0::while_0::i , 1 --> (int)@76
	ASSIGN		@76 --> dct::while_0::while_0::i
	JMP		.12
.15 : 
	ADD		dct::while_0::v , 1 --> (int)@77
	ASSIGN		@77 --> dct::while_0::v
	JMP		.11
.16 : 
	ADD		dct::u , 1 --> (int)@78
	ASSIGN		@78 --> dct::u
	JMP		.10
.17 : 
	RET

void idct ( float idct::mat[0][MAX_DIM_Y] , float idct::dct_mat[0][MAX_DIM_Y] , int idct::n , int idct::m )  : 
	int idct::u
	ASSIGN		0 --> idct::u
.18 : 
	LT		idct::u , idct::n --> (int)@79
	IF_NOT_JMP		@79 --> .29
	int idct::while_0::v
	ASSIGN		0 --> idct::while_0::v
.19 : 
	LT		idct::while_0::v , idct::m --> (int)@80
	IF_NOT_JMP		@80 --> .28
	MUL		idct::while_0::v , 1 --> (int)@81
	ADD		@81 , 0 --> (int)@82
	MUL		idct::u , 8 --> (int)@83
	ADD		@83 , @82 --> (int)@84
	MUL		0.250000 , idct::dct_mat[0] --> (float)@85
	ASSIGN		@85 --> idct::mat[@84]
	int idct::while_0::while_0::i
	int idct::while_0::while_0::j
	ASSIGN		1 --> idct::while_0::while_0::i
.20 : 
	LT		idct::while_0::while_0::i , idct::n --> (int)@86
	IF_NOT_JMP		@86 --> .21
	MUL		idct::while_0::v , 1 --> (int)@87
	ADD		@87 , 0 --> (int)@88
	MUL		idct::u , 8 --> (int)@89
	ADD		@89 , @88 --> (int)@90
	MUL		idct::while_0::v , 1 --> (int)@91
	ADD		@91 , 0 --> (int)@92
	MUL		idct::u , 8 --> (int)@93
	ADD		@93 , @92 --> (int)@94
	MUL		idct::while_0::while_0::i , 8 --> (int)@95
	ADD		@95 , 0 --> (int)@96
	MUL		0.500000 , idct::dct_mat[@96] --> (float)@97
	ADD		idct::mat[@94] , @97 --> (float)@98
	ASSIGN		@98 --> idct::mat[@90]
	ADD		idct::while_0::while_0::i , 1 --> (int)@99
	ASSIGN		@99 --> idct::while_0::while_0::i
	JMP		.20
.21 : 
	ASSIGN		1 --> idct::while_0::while_0::j
.22 : 
	LT		idct::while_0::while_0::j , idct::m --> (int)@100
	IF_NOT_JMP		@100 --> .23
	MUL		idct::while_0::v , 1 --> (int)@101
	ADD		@101 , 0 --> (int)@102
	MUL		idct::u , 8 --> (int)@103
	ADD		@103 , @102 --> (int)@104
	MUL		idct::while_0::v , 1 --> (int)@105
	ADD		@105 , 0 --> (int)@106
	MUL		idct::u , 8 --> (int)@107
	ADD		@107 , @106 --> (int)@108
	MUL		idct::while_0::while_0::j , 1 --> (int)@109
	ADD		@109 , 0 --> (int)@110
	ADD		0 , @110 --> (int)@111
	MUL		0.500000 , idct::dct_mat[@111] --> (float)@112
	ADD		idct::mat[@108] , @112 --> (float)@113
	ASSIGN		@113 --> idct::mat[@104]
	ADD		idct::while_0::while_0::j , 1 --> (int)@114
	ASSIGN		@114 --> idct::while_0::while_0::j
	JMP		.22
.23 : 
	ASSIGN		1 --> idct::while_0::while_0::i
.24 : 
	LT		idct::while_0::while_0::i , idct::n --> (int)@115
	IF_NOT_JMP		@115 --> .27
	ASSIGN		1 --> idct::while_0::while_0::j
.25 : 
	LT		idct::while_0::while_0::j , idct::m --> (int)@116
	IF_NOT_JMP		@116 --> .26
	MUL		idct::while_0::v , 1 --> (int)@117
	ADD		@117 , 0 --> (int)@118
	MUL		idct::u , 8 --> (int)@119
	ADD		@119 , @118 --> (int)@120
	MUL		idct::while_0::v , 1 --> (int)@121
	ADD		@121 , 0 --> (int)@122
	MUL		idct::u , 8 --> (int)@123
	ADD		@123 , @122 --> (int)@124
	MUL		idct::while_0::while_0::j , 1 --> (int)@125
	ADD		@125 , 0 --> (int)@126
	MUL		idct::while_0::while_0::i , 8 --> (int)@127
	ADD		@127 , @126 --> (int)@128
	ASSIGN		idct::n --> (float)@129
	DIV		PI , @129 --> (float)@130
	ASSIGN		idct::u --> (float)@131
	ADD		@131 , 0.500000 --> (float)@132
	MUL		@130 , @132 --> (float)@133
	ASSIGN		idct::while_0::while_0::i --> (float)@134
	MUL		@133 , @134 --> (float)@135
	CALL		my_cos ( @135 )  --> (float)@136
	MUL		idct::dct_mat[@128] , @136 --> (float)@137
	ASSIGN		idct::m --> (float)@138
	DIV		PI , @138 --> (float)@139
	ASSIGN		idct::while_0::v --> (float)@140
	ADD		@140 , 0.500000 --> (float)@141
	MUL		@139 , @141 --> (float)@142
	ASSIGN		idct::while_0::while_0::j --> (float)@143
	MUL		@142 , @143 --> (float)@144
	CALL		my_cos ( @144 )  --> (float)@145
	MUL		@137 , @145 --> (float)@146
	ADD		idct::mat[@124] , @146 --> (float)@147
	ASSIGN		@147 --> idct::mat[@120]
	ADD		idct::while_0::while_0::j , 1 --> (int)@148
	ASSIGN		@148 --> idct::while_0::while_0::j
	JMP		.25
.26 : 
	ADD		idct::while_0::while_0::i , 1 --> (int)@149
	ASSIGN		@149 --> idct::while_0::while_0::i
	JMP		.24
.27 : 
	MUL		idct::while_0::v , 1 --> (int)@150
	ADD		@150 , 0 --> (int)@151
	MUL		idct::u , 8 --> (int)@152
	ADD		@152 , @151 --> (int)@153
	MUL		idct::while_0::v , 1 --> (int)@154
	ADD		@154 , 0 --> (int)@155
	MUL		idct::u , 8 --> (int)@156
	ADD		@156 , @155 --> (int)@157
	MUL		idct::mat[@157] , 2.000000 --> (float)@158
	ASSIGN		idct::n --> (float)@159
	DIV		@158 , @159 --> (float)@160
	MUL		@160 , 2.000000 --> (float)@161
	ASSIGN		idct::m --> (float)@162
	DIV		@161 , @162 --> (float)@163
	ASSIGN		@163 --> idct::mat[@153]
	ADD		idct::while_0::v , 1 --> (int)@164
	ASSIGN		@164 --> idct::while_0::v
	JMP		.19
.28 : 
	ADD		idct::u , 1 --> (int)@165
	ASSIGN		@165 --> idct::u
	JMP		.18
.29 : 
	RET

int main (  )  : 
	CALL		getint (  )  --> (int)@166
	CALL		getint (  )  --> (int)@167
	int main::dim_x
	ASSIGN		@166 --> main::dim_x
	int main::dim_y
	ASSIGN		@167 --> main::dim_y
	int main::i
	ASSIGN		0 --> main::i
.30 : 
	LT		main::i , main::dim_x --> (int)@168
	IF_NOT_JMP		@168 --> .33
	int main::while_0::j
	ASSIGN		0 --> main::while_0::j
.31 : 
	LT		main::while_0::j , main::dim_y --> (int)@169
	IF_NOT_JMP		@169 --> .32
	MUL		main::while_0::j , 1 --> (int)@170
	ADD		@170 , 0 --> (int)@171
	MUL		main::i , 8 --> (int)@172
	ADD		@172 , @171 --> (int)@173
	CALL		getfloat (  )  --> (float)@174
	ASSIGN		@174 --> test_block[@173]
	ADD		main::while_0::j , 1 --> (int)@175
	ASSIGN		@175 --> main::while_0::j
	JMP		.31
.32 : 
	ADD		main::i , 1 --> (int)@176
	ASSIGN		@176 --> main::i
	JMP		.30
.33 : 
	CALL		dct ( test_dct , test_block , main::dim_x , main::dim_y ) 
	CALL		write_mat ( test_dct , main::dim_x , main::dim_y ) 
	CALL		idct ( test_idct , test_dct , main::dim_x , main::dim_y ) 
	CALL		write_mat ( test_idct , main::dim_x , main::dim_y ) 
	RET		0

